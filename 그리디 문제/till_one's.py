# 1이 될 때까지
'''
* 문제 *
입력받은 수 N을 1이 될 때까지 다음의 두 과정 중 하나를 반복적으로 선택하여 수행한다. 
    1. N에서 1을 뺀다.
    2. N을 K로 나눈다. (단, N이 K로 나누어떨어질 때만 선택 가능)

[입력 조건]
    - 첫째 줄에 N(2 <= N <= 100,000)과 K(2 <= K <= 100,000)가 공백으로 구분되며 각각 자연수로 주어진다. 
      이때 입력으로 주어지는 N은 항상 K보다 크거나 같다.

[출력 조건]
    - 첫째 줄에 N이 1이 될 때까지 1번 혹은 2번의 과정을 수행해야 하는 횟수의 최솟값을 출력한다.

[입력 예시1]
25 5

[출력 예시1]
2

* 아이디어 *
1. N이 K로 나누어떨어질 때까지 1씩 빼기(1번).
2. 최대한 나누는 과정(2번)을 많이 수행.
3. N이 K보다 작을 때 1씩 빼는 과정(1번) 수행
'''
# N, K를 공백으로 구분하여 입력받기
n, k = map(int, input().split())
result = 0

# N이 K보다 클 때
while True:
    # target : N이 K의 배수일 때 해당 수
    target = (n // k) * k
    result += (n - target)  # N을 K로 나누었을 때 나머지 만큼 1을 뺌
    n = target  # N이 K의 배수(target)이 됨
    # N이 K보다 작을 때(더 이상 나눌 수 없을 때) 반복문 탈출
    if n < k:
        break
    # K로 나누기
    result += 1
    n //= k

# N이 K보다 작을 때 1씩 뺌
result += (n - 1)
print(result)

